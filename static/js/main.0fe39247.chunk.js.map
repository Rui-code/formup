{"version":3,"sources":["components/TextFieldWithErrorMessage.jsx","locale/index.js","schemas/familyMemberSchema.js","schemas/exampleSchema.js","components/CustomInput.jsx","styles.js","App.jsx","index.js"],"names":["TextFieldWithErrorMessage","formupData","props","TextField","helperText","errorMessage","locale","mixed","default","familyMemberSchema","createSchema","name","yup","required","label","age","min","max","email","exampleSchema","phone","customInput","errorMessageExample","gender","acceptedTerms","favoriteFood","authentication","shape","password","confirmPassword","oneOf","colors","of","familyMembers","CustomInput","title","defaultProps","useStyles","makeStyles","theme","cardContainer","width","card","padding","form","display","alignItems","justifyContent","flexDirection","centerContent","centerSelf","alignSelf","justifySelf","marginTop5","marginTop","spacing","marginTop2","marginTop1","fullWidth","subtitle","marginBottom","arrayButton","App","useState","submissionResult","setSubmissionResult","useFormup","onError","errors","JSON","stringify","onSubmit","values","initialValues","FormInputGroupItem","FormInputGroup","FormArrayField","formikForm","submitForm","FormInput","Form","classes","Grid","container","className","item","xs","classNames","Card","elevation","Typography","variant","align","role","aria-label","component","injectFormupData","type","FormControlLabel","control","value","Radio","initialValue","Checkbox","multi","items","arrayHelpers","map","index","key","path","onClick","remove","push","getPath","multiline","rows","Divider","Button","color","href","rel","target","IconButton","margin","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0fe39247.chunk.js","sourcesContent":["import React from 'react';\n\nimport { TextField } from '@material-ui/core';\n\nconst TextFieldWithErrorMessage = ({\n  formupData,\n  ...props\n}) => (\n  <TextField\n    {...props}\n    helperText={formupData && formupData.errorMessage}\n  />\n);\n\nexport default TextFieldWithErrorMessage;\n","/**\n * Customized yup locale to add multi-language support.\n */\nconst locale = {\n  mixed: {\n    default: 'Invalid field!',\n  },\n};\n\nexport default locale;\n","import { createSchema } from '@formup/core';\nimport * as yup from 'yup';\n\nimport locale from '../locale';\n\n// You don't need to use createSchema if you're not customizing your locale.\n// You can use yup instead, no problems!\nconst familyMemberSchema = createSchema({\n  name: yup.string()\n    .required()\n    .label('Name'),\n\n  age: yup.number()\n    .min(0)\n    .max(120)\n    .label('Age'),\n\n  email: yup.string()\n    .email()\n    .label('Email'),\n}, locale);\n\nexport default familyMemberSchema;\n","import { createSchema } from '@formup/core';\nimport * as yup from 'yup';\n\nimport familyMemberSchema from './familyMemberSchema';\nimport locale from '../locale';\n\n/**\n * The example schemas\n *\n * You don't need to use createSchema if you're not customizing your locale.\n * You can use yup directly instead, no problems!\n */\nconst exampleSchema = createSchema({\n  // Your schema supports simple field\n  name: yup.string()\n    .required()\n    .label('Name'),\n\n  // Or a field with custom validations\n  email: yup.string()\n    .required()\n    .email()\n    .label('Email'),\n\n  // Optional fields too\n  phone: yup.string()\n    .required()\n    .label('Phone'),\n\n  customInput: yup.string()\n    .required(),\n\n  errorMessageExample: yup.string()\n    .required('This is a custom validation message =)'),\n\n  // You can control single choice fields using Form Groups\n  gender: yup.string()\n    .required()\n    .label('Gender'),\n\n  acceptedTerms: yup.boolean()\n    .default(false)\n    .label('Accepted terms'),\n\n  // You can control single choice fields using Form Groups\n  favoriteFood: yup.string()\n    .label('Favorite Food'),\n\n  // And even multi-level nested fields!\n  authentication: yup.object().shape({\n    password: yup.string()\n      .required()\n      .min(5)\n      .label('Password'),\n    confirmPassword: yup.string()\n      .required()\n      .min(5)\n      .oneOf([yup.ref('password'), null])\n      .label('Confirm your password'),\n  }),\n\n  // Also, array fields! <3\n  colors: yup.array()\n    .of(\n      yup\n        .string()\n        .required(),\n    ),\n\n  // Object arrays too!\n  familyMembers: yup.array()\n    .of(familyMemberSchema),\n}, locale);\n\nexport default exampleSchema;\n","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\n\nconst CustomInput = ({\n  title, // Custom property\n  ...props\n}) => (\n  <TextField label={title} {...props} />\n);\n\nCustomInput.propTypes = {\n  title: PropTypes.string,\n};\n\nCustomInput.defaultProps = {\n  title: null,\n};\n\nexport default CustomInput;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  cardContainer: {\n    width: '80%',\n  },\n  card: {\n    width: '100%',\n    padding: 30,\n  },\n  form: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n  },\n  centerContent: {\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  centerSelf: {\n    alignSelf: 'center',\n    justifySelf: 'center',\n  },\n  marginTop5: {\n    marginTop: theme.spacing(5),\n  },\n  marginTop2: {\n    marginTop: theme.spacing(2),\n  },\n  marginTop1: {\n    marginTop: theme.spacing(1),\n  },\n  fullWidth: {\n    width: '100%',\n  },\n  subtitle: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(0.5),\n  },\n  arrayButton: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n}));\n\nexport default useStyles;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Radio from '@material-ui/core/Radio';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\n\nimport { useFormup } from '@formup/core';\n\nimport TextFieldWithErrorMessage from './components/TextFieldWithErrorMessage';\nimport exampleSchema from './schemas/exampleSchema';\nimport CustomInput from './components/CustomInput';\nimport useStyles from './styles';\n\nconst App = () => {\n  const [submissionResult, setSubmissionResult] = useState('');\n\n  // You can add custom error handling if your validation fails\n  const handleValidationError = (errors) => {\n    setSubmissionResult(`Form validation errors! \\n ${JSON.stringify(errors, null, 2)}`);\n  };\n\n  // Here we'll handle submitting the form\n  const handleSubmitForm = (values) => {\n    setSubmissionResult(`Form is valid! \\n ${JSON.stringify(values, null, 2)}`);\n\n    // Submit your form to your backend or any API here! =).\n    return true;\n  };\n\n  // Initialize your Formup form\n  const {\n    FormInputGroupItem,\n    FormInputGroup,\n    FormArrayField,\n    formikForm,\n    submitForm,\n    FormInput,\n    Form,\n  } = useFormup(exampleSchema, {\n    // Formik options\n    onError: handleValidationError,\n    onSubmit: handleSubmitForm,\n    initialValues: {\n      colors: [\n        'Blue',\n        'Red',\n      ],\n      familyMembers: [\n        {\n          name: 'John Foo',\n          age: 30,\n          email: 'foo@example.com',\n        },\n      ],\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={3} className={classes.centerContent}>\n      <Grid\n        item\n        xs={12}\n        className={classNames(classes.marginTop5, classes.centerContent, classes.cardContainer)}\n      >\n        <Card className={classes.card} elevation={5}>\n          <Typography variant=\"h4\" align=\"center\">\n            Formup\n\n            <Typography variant=\"body1\" align=\"center\">\n              {'...is awesome! '}\n              <span role=\"img\" aria-label=\"Formup is awesome\">😆</span>\n            </Typography>\n          </Typography>\n\n          <Form formikForm={formikForm} className={classNames(classes.form, classes.marginTop5)}>\n            <Typography variant=\"h5\" align=\"left\">\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Default inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              FormInput will take care of all validation, according to your yup schema!\n              Simply provide the <strong>name</strong> prop to link with your schema field.\n            </Typography>\n\n            <FormInput name=\"name\" />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Custom inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can render <strong>ANY</strong> custom input as a component!\n              Any custom prop passed to <strong>FormInput</strong> will be injected\n              into your component. =)\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Formup is compatible out-of-the-box with major style libraries such\n              as <strong>Material UI</strong>, <strong>React Bootstrap</strong> and\n              much more!\n            </Typography>\n\n            <FormInput\n              name=\"customInput\"\n              title=\"I am a custom input component!\"\n              component={CustomInput}\n            />\n\n            <FormInput name=\"email\" label=\"Email\" component={TextField} />\n            <FormInput name=\"phone\" label=\"Phone\" component={TextField} />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Extended Formup data in inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              If you pass the <strong>injectFormupData</strong> prop\n              to <strong>FormInput</strong> component, it will inject a prop\n              named <strong>formupData</strong> into the rendered component.\n              With <strong>formupData</strong>, you can access extended information,\n              such as the <strong>validation error message</strong>, if any.\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              The prop <strong>injectFormupData</strong> is by default set\n              to <strong>false</strong> in order to maintain compatibility and\n              prevent errors. Note that when using this, <strong>you must make sure</strong> that\n              the <strong>formupData</strong> prop is not injected into the\n              final <strong>input</strong> component.\n            </Typography>\n\n            <FormInput\n              name=\"errorMessageExample\"\n              label=\"Input with validation error message\"\n              title=\"I will show the error validation message!\"\n              component={TextFieldWithErrorMessage}\n              className={classes.marginTop2}\n              injectFormupData\n            />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Yup nested inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Formup also supports <strong>unlimited</strong> nesting with yup!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              The inputs below all belong to an object named authentication in the schema.\n            </Typography>\n\n            <FormInput\n              type=\"password\"\n              name=\"authentication.password\"\n              component={TextFieldWithErrorMessage}\n              injectFormupData\n            />\n\n            <FormInput\n              type=\"password\"\n              name=\"authentication.confirmPassword\"\n              component={TextFieldWithErrorMessage}\n              injectFormupData\n            />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Single-choice inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              With Formup, you can control single-choice inputs easily!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can use <strong>FormInputGroup</strong> and\n              <strong> FormInputGroupItem</strong> components for this.\n            </Typography>\n\n            <FormInputGroup name=\"gender\">\n              <Typography variant=\"body2\" align=\"left\" className={classes.marginTop2}>\n                What's your gender?\n              </Typography>\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Male\" component={Radio} />}\n                label=\"Male\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Female\" component={Radio} />}\n                label=\"Female\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Non-binary\" component={Radio} />}\n                label=\"Non-binary\"\n              />\n            </FormInputGroup>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Single-choice toggle inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can render a single-choice input with only one option too!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              It will toggle between `initialValue` and its `value`.\n            </Typography>\n\n            <FormInputGroup name=\"acceptedTerms\" initialValue={false}>\n              <FormControlLabel\n                control={<FormInputGroupItem value={true} component={Checkbox} />}\n                label=\"I've accepted the terms of service (which I didn't read)\"\n              />\n            </FormInputGroup>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Multiple-choice inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              What did you expect? Well, of course we support multiple-choice inputs too!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Oh, did I mention you can use <strong>initialValue </strong>\n              to set the initial checked items?\n            </Typography>\n\n            <FormInputGroup name=\"favoriteFood\" multi initialValue={['Cupcake', 'Donut']}>\n              <Typography variant=\"body2\" align=\"left\" className={classes.marginTop2}>\n                What's favorite food? You can pick as many as you want!\n              </Typography>\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Cupcake\" component={Checkbox} />}\n                label=\"Cupcake\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Donut\" component={Checkbox} />}\n                label=\"Donut\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Ice Cream Sandwich\" component={Checkbox} />}\n                label=\"Ice Cream Sandwich\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Jelly Bean\" component={Checkbox} />}\n                label=\"Jelly Bean\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"KitKat\" component={Checkbox} />}\n                label=\"KitKat\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Lollipop\" component={Checkbox} />}\n                label=\"Lollipop\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Marshmallow\" component={Checkbox} />}\n                label=\"Marshmallow\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Nougat\" component={Checkbox} />}\n                label=\"Nougat\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Oreo\" component={Checkbox} />}\n                label=\"Oreo\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Pie\" component={Checkbox} />}\n                label=\"Pie\"\n              />\n            </FormInputGroup>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Simple array fields'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Formup also supports simple array fields - such as\n              arrays of primitive types and strings!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can use formup to easily render any array type,\n              by using <strong>FormArrayField</strong>.\n            </Typography>\n\n            <FormArrayField name=\"colors\">\n              {(items, arrayHelpers) => (\n                <>\n                  {items.map((item, index) => (\n                    <Grid container spacing={3} key={item.path}>\n                      <Grid item>\n                        <FormInput\n                          component={TextFieldWithErrorMessage}\n                          injectFormupData\n                          name={item.path}\n                        />\n                      </Grid>\n\n                      <Grid item className={classes.arrayButton}>\n                        <button\n                          onClick={() => arrayHelpers.remove(index)}\n                          type=\"button\"\n                        >\n                          -\n                        </button>\n                      </Grid>\n                    </Grid>\n                  ))}\n\n                  <button\n                    className={classes.marginTop2}\n                    onClick={() => arrayHelpers.push()}\n                    type=\"button\"\n                  >\n                    +\n                  </button>\n                </>\n              )}\n            </FormArrayField>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Object array fields'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              In addition to simple array fields, you can also use object arrays!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Instead of using <strong>item.path</strong>, you can\n              use <strong>item.getPath(\"...\")</strong> to\n              build the path to your property.\n            </Typography>\n\n            <FormArrayField name=\"familyMembers\">\n              {(items, arrayHelpers) => (\n                <>\n                  {items.map((item, index) => (\n                    <Grid container spacing={3} key={item.path}>\n                      <Grid item>\n                        <FormInput\n                          component={TextFieldWithErrorMessage}\n                          name={item.getPath('name')}\n                          injectFormupData\n                        />\n                      </Grid>\n\n                      <Grid item>\n                        <FormInput\n                          component={TextFieldWithErrorMessage}\n                          name={item.getPath('age')}\n                          injectFormupData\n                        />\n                      </Grid>\n\n                      <Grid item>\n                        <FormInput\n                          component={TextFieldWithErrorMessage}\n                          name={item.getPath('email')}\n                          injectFormupData\n                        />\n                      </Grid>\n\n                      <Grid item className={classes.arrayButton}>\n                        <button\n                          onClick={() => arrayHelpers.remove(index)}\n                          type=\"button\"\n                        >\n                          -\n                        </button>\n                      </Grid>\n                    </Grid>\n                  ))}\n\n                  <button\n                    className={classes.marginTop2}\n                    type=\"button\"\n                    onClick={() => arrayHelpers.push({\n                      name: 'John Foo clone',\n                      age: 10,\n                      email: 'foo@bar.com',\n                    })}\n                  >\n                    +\n                  </button>\n                </>\n              )}\n            </FormArrayField>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">📝</span>\n              {' Form value'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Here's your fancy form value in a beautiful real-time JSON string.\n            </Typography>\n\n            <TextField\n              multiline\n              rows={15}\n              variant=\"outlined\"\n              className={classes.fullWidth}\n              value={JSON.stringify(formikForm.values, null, 2)}\n            />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">📝</span>\n              {' Form submission result'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              If you press the button below you'll see the results here!\n            </Typography>\n\n            <TextField\n              multiline\n              rows={5}\n              variant=\"outlined\"\n              className={classes.fullWidth}\n              value={submissionResult}\n            />\n\n            <Divider />\n\n            <Button\n              className={classNames(classes.marginTop5, classes.centerSelf)}\n              onClick={submitForm}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              {'Submit! '}\n              <span role=\"img\" aria-label=\"Formup is awesome\">🚀</span>\n            </Button>\n          </Form>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} className={classNames(classes.marginTop2, classes.centerContent)}>\n        <Typography variant=\"body1\" className={classes.subtitle}>\n          <span>\n            {'Made with '}\n            <span role=\"img\" aria-label=\"github\">❤️</span>\n            {'by '}\n            <a\n              href=\"https://github.com/pedro-lb\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Pedro Bini\n            </a>\n          </span>\n\n          <span>\n            {' and contributors @ '}\n            <a\n              href=\"https://www.npmjs.com/org/formup\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Formup\n            </a>\n          </span>\n          .\n        </Typography>\n\n        <a\n          href=\"https://github.com/pedro-lb/formup\"\n          rel=\"noopener noreferrer\"\n          className={classes.marginTop1}\n          target=\"_blank\"\n        >\n          <IconButton\n            aria-label=\"github repo\"\n            className={classes.margin}\n          >\n            <GitHubIcon color=\"primary\" fontSize=\"large\" />\n          </IconButton>\n        </a>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}