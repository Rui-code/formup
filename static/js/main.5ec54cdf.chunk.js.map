{"version":3,"sources":["components/TextFieldWithErrorMessage.jsx","components/CustomInput.jsx","styles.js","App.jsx","index.js"],"names":["TextFieldWithErrorMessage","formupData","props","TextField","helperText","errorMessage","CustomInput","title","label","defaultProps","useStyles","makeStyles","theme","cardContainer","width","card","padding","form","display","alignItems","justifyContent","flexDirection","centerContent","centerSelf","alignSelf","justifySelf","marginTop5","marginTop","spacing","marginTop2","marginTop1","fullWidth","subtitle","marginBottom","schema","createSchema","name","yup","required","email","phone","customInput","errorMessageExample","gender","acceptedTerms","default","favoriteFood","authentication","shape","password","min","confirmPassword","oneOf","mixed","App","useState","submissionResult","setSubmissionResult","useFormup","onError","errors","JSON","stringify","onSubmit","values","FormInputGroupItem","FormInputGroup","formikForm","submitForm","FormInput","Form","classes","Grid","container","className","item","xs","classNames","Card","elevation","Typography","variant","align","role","aria-label","component","injectFormupData","type","FormControlLabel","control","value","Radio","initialValue","Checkbox","multi","multiline","rows","Divider","Button","onClick","color","href","rel","target","IconButton","margin","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ec54cdf.chunk.js","sourcesContent":["import React from 'react';\n\nimport { TextField } from '@material-ui/core';\n\nconst TextFieldWithErrorMessage = ({\n  formupData,\n  ...props\n}) => (\n  <TextField\n    {...props}\n    helperText={formupData && formupData.errorMessage}\n  />\n);\n\nexport default TextFieldWithErrorMessage;\n","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\n\nconst CustomInput = ({\n  title, // Custom property\n  ...props\n}) => (\n  <TextField label={title} {...props} />\n);\n\nCustomInput.propTypes = {\n  title: PropTypes.string,\n};\n\nCustomInput.defaultProps = {\n  title: null,\n};\n\nexport default CustomInput;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  cardContainer: {\n    width: '80%',\n  },\n  card: {\n    width: '100%',\n    padding: 30,\n  },\n  form: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n  },\n  centerContent: {\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  centerSelf: {\n    alignSelf: 'center',\n    justifySelf: 'center',\n  },\n  marginTop5: {\n    marginTop: theme.spacing(5),\n  },\n  marginTop2: {\n    marginTop: theme.spacing(2),\n  },\n  marginTop1: {\n    marginTop: theme.spacing(1),\n  },\n  fullWidth: {\n    width: '100%',\n  },\n  subtitle: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(0.5),\n  },\n}));\n\nexport default useStyles;\n","import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport classNames from 'classnames';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Radio from '@material-ui/core/Radio';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\n\nimport {\n  useFormup,\n  createSchema,\n} from '@formup/core';\n\nimport TextFieldWithErrorMessage from './components/TextFieldWithErrorMessage';\nimport CustomInput from './components/CustomInput';\nimport useStyles from './styles';\n\n// You can customize your locale to support multiple languages easily using createSchema!\nconst locale = {\n  mixed: {\n    default: 'Invalid field!',\n  },\n};\n\n// You don't need to use createSchema if you're not customizing your locale.\n// You can use yup instead, no problems!\nconst schema = createSchema({\n  // Your schema supports simple field\n  name: yup.string()\n    .required()\n    .label('Name'),\n\n  // Or a field with custom validations\n  email: yup.string()\n    .required()\n    .email()\n    .label('Email'),\n\n  // Optional fields too\n  phone: yup.string()\n    .required()\n    .label('Phone'),\n\n  customInput: yup.string()\n    .required(),\n\n  errorMessageExample: yup.string()\n    .required('This is a custom validation message =)'),\n\n  // You can control single choice fields using Form Groups\n  gender: yup.string()\n    .required()\n    .label('Gender'),\n\n  acceptedTerms: yup.boolean()\n    .default(false)\n    .label('Accepted terms'),\n\n  // You can control single choice fields using Form Groups\n  favoriteFood: yup.string()\n    .label('Favorite Food'),\n\n  // And even multi-level nested fields!\n  authentication: yup.object().shape({\n    password: yup.string()\n      .required()\n      .min(5)\n      .label('Password'),\n    confirmPassword: yup.string()\n      .required()\n      .min(5)\n      .oneOf([yup.ref('password'), null])\n      .label('Confirm your password'),\n  }),\n}, locale);\n\nconst App = () => {\n  const [submissionResult, setSubmissionResult] = useState('');\n\n  // You can add custom error handling if your validation fails\n  const handleValidationError = (errors) => {\n    setSubmissionResult(`Form validation errors! \\n ${JSON.stringify(errors, null, 2)}`);\n  };\n\n  // Here we'll handle submitting the form\n  const handleSubmitForm = (values) => {\n    setSubmissionResult(`Form is valid! \\n ${JSON.stringify(values, null, 2)}`);\n\n    // Submit your form to your backend or any API here! =).\n    return true;\n  };\n\n  // Initialize your Formup form\n  const {\n    FormInputGroupItem,\n    FormInputGroup,\n    formikForm,\n    submitForm,\n    FormInput,\n    Form,\n  } = useFormup(schema, {\n    // Formik options\n    onError: handleValidationError,\n    onSubmit: handleSubmitForm,\n  });\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={3} className={classes.centerContent}>\n      <Grid\n        item\n        xs={12}\n        className={classNames(classes.marginTop5, classes.centerContent, classes.cardContainer)}\n      >\n        <Card className={classes.card} elevation={5}>\n          <Typography variant=\"h4\" align=\"center\">\n            Formup\n\n            <Typography variant=\"body1\" align=\"center\">\n              {'...is awesome! '}\n              <span role=\"img\" aria-label=\"Formup is awesome\">😆</span>\n            </Typography>\n          </Typography>\n\n          <Form formikForm={formikForm} className={classNames(classes.form, classes.marginTop5)}>\n            <Typography variant=\"h5\" align=\"left\">\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Default inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              FormInput will take care of all validation, according to your yup schema!\n              Simply provide the <strong>name</strong> prop to link with your schema field.\n            </Typography>\n\n            <FormInput name=\"name\" />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Custom inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can render <strong>ANY</strong> custom input as a component!\n              Any custom prop passed to <strong>FormInput</strong> will be injected\n              into your component. =)\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Formup is compatible out-of-the-box with major style libraries such\n              as <strong>Material UI</strong>, <strong>React Bootstrap</strong> and\n              much more!\n            </Typography>\n\n            <FormInput\n              name=\"customInput\"\n              title=\"I am a custom input component!\"\n              component={CustomInput}\n            />\n\n            <FormInput name=\"email\" label=\"Email\" component={TextField} />\n            <FormInput name=\"phone\" label=\"Phone\" component={TextField} />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Extended Formup data in inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              If you pass the <strong>injectFormupData</strong> prop\n              to <strong>FormInput</strong> component, it will inject a prop\n              named <strong>formupData</strong> into the rendered component.\n              With <strong>formupData</strong>, you can access extended information,\n              such as the <strong>validation error message</strong>, if any.\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              The prop <strong>injectFormupData</strong> is by default set\n              to <strong>false</strong> in order to maintain compatibility and\n              prevent errors. Note that when using this, <strong>you must make sure</strong> that\n              the <strong>formupData</strong> prop is not injected into the\n              final <strong>input</strong> component.\n            </Typography>\n\n            <FormInput\n              name=\"errorMessageExample\"\n              label=\"Input with validation error message\"\n              title=\"I will show the error validation message!\"\n              component={TextFieldWithErrorMessage}\n              className={classes.marginTop2}\n              injectFormupData\n            />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Yup nested inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Formup also supports <strong>unlimited</strong> nesting with yup!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              The inputs below all belong to an object named authentication in the schema.\n            </Typography>\n\n            <FormInput\n              type=\"password\"\n              name=\"authentication.password\"\n              component={TextFieldWithErrorMessage}\n              injectFormupData\n            />\n\n            <FormInput\n              type=\"password\"\n              name=\"authentication.confirmPassword\"\n              component={TextFieldWithErrorMessage}\n              injectFormupData\n            />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Single-choice inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              With Formup, you can control single-choice inputs easily!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can use <strong>FormInputGroup</strong> and\n              <strong> FormInputGroupItem</strong> components for this.\n            </Typography>\n\n            <FormInputGroup name=\"gender\">\n              <Typography variant=\"body2\" align=\"left\" className={classes.marginTop2}>\n                What's your gender?\n              </Typography>\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Male\" component={Radio} />}\n                label=\"Male\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Female\" component={Radio} />}\n                label=\"Female\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Non-binary\" component={Radio} />}\n                label=\"Non-binary\"\n              />\n            </FormInputGroup>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Single-choice toggle inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              You can render a single-choice input with only one option too!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              It will toggle between `initialValue` and its `value`.\n            </Typography>\n\n            <FormInputGroup name=\"acceptedTerms\" initialValue={false}>\n              <FormControlLabel\n                control={<FormInputGroupItem value={true} component={Checkbox} />}\n                label=\"I've accepted the terms of service (which I didn't read)\"\n              />\n            </FormInputGroup>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">✅</span>\n              {' Multiple-choice inputs'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              What did you expect? Well, of course we support multiple-choice inputs too!\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Oh, did I mention you can use <strong>initialValue </strong>\n              to set the initial checked items?\n            </Typography>\n\n            <FormInputGroup name=\"favoriteFood\" multi initialValue={['Cupcake', 'Donut']}>\n              <Typography variant=\"body2\" align=\"left\" className={classes.marginTop2}>\n                What's favorite food? You can pick as many as you want!\n              </Typography>\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Cupcake\" component={Checkbox} />}\n                label=\"Cupcake\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Donut\" component={Checkbox} />}\n                label=\"Donut\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Ice Cream Sandwich\" component={Checkbox} />}\n                label=\"Ice Cream Sandwich\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Jelly Bean\" component={Checkbox} />}\n                label=\"Jelly Bean\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"KitKat\" component={Checkbox} />}\n                label=\"KitKat\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Lollipop\" component={Checkbox} />}\n                label=\"Lollipop\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Marshmallow\" component={Checkbox} />}\n                label=\"Marshmallow\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Nougat\" component={Checkbox} />}\n                label=\"Nougat\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Oreo\" component={Checkbox} />}\n                label=\"Oreo\"\n              />\n\n              <FormControlLabel\n                control={<FormInputGroupItem value=\"Pie\" component={Checkbox} />}\n                label=\"Pie\"\n              />\n            </FormInputGroup>\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">📝</span>\n              {' Form value'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              Here's your fancy form value in a beautiful real-time JSON string.\n            </Typography>\n\n            <TextField\n              multiline\n              rows={15}\n              variant=\"outlined\"\n              className={classes.fullWidth}\n              value={JSON.stringify(formikForm.values, null, 2)}\n            />\n\n            <Typography variant=\"h5\" align=\"left\" className={classes.marginTop5}>\n              <span role=\"img\" aria-label=\"Check\">📝</span>\n              {' Form submission result'}\n            </Typography>\n\n            <Typography variant=\"body1\" align=\"left\" className={classes.subtitle}>\n              If you press the button below you'll see the results here!\n            </Typography>\n\n            <TextField\n              multiline\n              rows={5}\n              variant=\"outlined\"\n              className={classes.fullWidth}\n              value={submissionResult}\n            />\n\n            <Divider />\n\n            <Button\n              className={classNames(classes.marginTop5, classes.centerSelf)}\n              onClick={submitForm}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              {'Submit! '}\n              <span role=\"img\" aria-label=\"Formup is awesome\">🚀</span>\n            </Button>\n          </Form>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} className={classNames(classes.marginTop2, classes.centerContent)}>\n        <Typography variant=\"body1\" className={classes.subtitle}>\n          <span>\n            {'Made with '}\n            <span role=\"img\" aria-label=\"github\">❤️</span>\n            {'by '}\n            <a\n              href=\"https://github.com/pedro-lb\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Pedro Bini\n            </a>\n          </span>\n\n          <span>\n            {' and contributors @ '}\n            <a\n              href=\"https://www.npmjs.com/org/formup\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Formup\n            </a>\n          </span>\n          .\n        </Typography>\n\n        <a\n          href=\"https://github.com/pedro-lb/formup\"\n          rel=\"noopener noreferrer\"\n          className={classes.marginTop1}\n          target=\"_blank\"\n        >\n          <IconButton\n            aria-label=\"github repo\"\n            className={classes.margin}\n          >\n            <GitHubIcon color=\"primary\" fontSize=\"large\" />\n          </IconButton>\n        </a>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}